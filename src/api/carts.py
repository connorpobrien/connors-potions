from fastapi import APIRouter, Depends, Request
from pydantic import BaseModel
from src.api import auth
import sqlalchemy
from src import database as db

router = APIRouter(
    prefix="/carts",
    tags=["cart"],
    dependencies=[Depends(auth.get_api_key)],
)


class NewCart(BaseModel):
    customer: str

@router.post("/")
def create_cart(new_cart: NewCart):
    """ Creates a new cart for a specific customer. """
    with db.engine.begin() as connection:
        sql_query = """INSERT INTO carts (customer_name)
                        VALUES (:customer) 
                        RETURNING cart_id"""
        result = connection.execute(sqlalchemy.text(sql_query), {"customer": new_cart.customer})
    
        # The cart id is generated by the database
        cart_id = result.first().cart_id

    print(f'''Cart generated for {new_cart.customer} with cart_id: {cart_id}''')
    return {"cart_id": cart_id}


@router.get("/{cart_id}")
def get_cart(cart_id: int):
    """ Returns the items in a customer's cart."""
    return {}

    
class CartItem(BaseModel):
    quantity: int


@router.post("/{cart_id}/items/{item_sku}")
def set_item_quantity(cart_id: int, item_sku: str, cart_item: CartItem):
    """ Updates the quantity of a specific item in a cart. """

    with db.engine.begin() as connection:
        # Check if the item is already in the cart
        sql_query = """SELECT quantity FROM cart_items WHERE cart_id = :cart_id AND item_sku = :item_sku"""
        result = connection.execute(sqlalchemy.text(sql_query), {"cart_id": cart_id, "item_sku": item_sku})
        existing_item = result.fetchone()

        if existing_item:
            # If the item exists, update the quantity
            sql_query = """UPDATE cart_items SET quantity = :quantity WHERE cart_id = :cart_id AND item_sku = :item_sku"""
        else:
            # If the item doesn't exist, insert it
            sql_query = """INSERT INTO cart_items (cart_id, item_sku, quantity) VALUES (:cart_id, :item_sku, :quantity)"""

        connection.execute(sqlalchemy.text(sql_query), {"cart_id": cart_id, "item_sku": item_sku, "quantity": cart_item.quantity})

    print(f'''Item {item_sku} quantity updated to {cart_item.quantity} in cart with id = {cart_id}''')
    return {"success": True}


class CartCheckout(BaseModel):
    payment: str

@router.post("/{cart_id}/checkout")
def checkout(cart_id: int, cart_checkout: CartCheckout):
    """ Handles the checkout process for a specific cart. """
    # Get the items in the cart
    with db.engine.begin() as connection:
        sql_query = """SELECT item_sku, quantity FROM cart_items WHERE cart_id = :cart_id"""
        result = connection.execute(sqlalchemy.text(sql_query), {"cart_id": cart_id})
        cart_items = result.fetchall()

        total_gold_paid = 0
        total_potions_bought = 0

        # form catalog 
        combined_query = """SELECT 
                                catalog.sku, 
                                catalog.name, 
                                catalog.price, 
                                catalog.red_ml, 
                                catalog.green_ml, 
                                catalog.blue_ml, 
                                catalog.dark_ml,
                                COALESCE(ledger.total, 0) AS quantity
                            FROM 
                                catalog
                            LEFT JOIN 
                                (SELECT 
                                    sku, 
                                    SUM(change) AS total 
                                FROM 
                                    catalog_ledger 
                                GROUP BY 
                                    sku) AS ledger
                            ON 
                                catalog.sku = ledger.sku
                            WHERE
                                catalog.sku = :item_sku
                        """
        
        for item_sku, quantity in cart_items:
            # get price
            result = connection.execute(sqlalchemy.text(combined_query), {"item_sku": item_sku})
            price = result.first().price
            total_gold_paid += price * quantity
            total_potions_bought += quantity

            # add gold transaction transactions table
            gold_transaction = """INSERT INTO transactions (description) VALUES (:description) RETURNING transaction_id"""
            result = connection.execute(sqlalchemy.text(gold_transaction), {"description": f"""Gold spend on {item_sku}: {price * quantity}"""})
            transaction_id = result.fetchone()[0]

            # add gold transaction to inventory_ledger
            gold_inventory_ledger = """INSERT INTO inventory_ledger (type, change, transaction_id) VALUES (:type, :change, :transaction_id)"""
            connection.execute(sqlalchemy.text(gold_inventory_ledger), {"type": "gold", "change": price * quantity, "transaction_id": transaction_id})

            # add potion transaction to transactions table
            potion_transaction = """INSERT INTO transactions (description) VALUES (:description) RETURNING transaction_id"""
            result = connection.execute(sqlalchemy.text(potion_transaction), {"description": f"""{quantity} of potion type {item_sku} sold."""})

            # find catalog_id, sku from catalog table
            catalog_id_query = """SELECT catalog_id FROM catalog WHERE sku = :sku"""
            result = connection.execute(sqlalchemy.text(catalog_id_query), {"sku": item_sku})
            catalog_id = result.fetchone()[0]

            # add potion transaction to catalog_ledger
            catalog_ledger = """INSERT INTO catalog_ledger (transaction_id, catalog_id, change, sku) VALUES (:transaction_id, :catalog_id, :change, :sku)"""
            connection.execute(sqlalchemy.text(catalog_ledger), {"transaction_id": transaction_id, "catalog_id": catalog_id, "change": (-1) * quantity, "sku": item_sku})

            # remove items from cart_items
            sql_query = """DELETE FROM cart_items WHERE cart_id = :cart_id AND item_sku = :item_sku"""
            connection.execute(sqlalchemy.text(sql_query), {"cart_id": cart_id, "item_sku": item_sku})

    print(f'''Cart with id = {cart_id} checked out with payment method {cart_checkout.payment}''')
    print(f'''Total gold paid: {total_gold_paid}''')
    print(f'''Total potions bought: {total_potions_bought}''')

    return {"total_potions_bought": total_potions_bought, "total_gold_paid": total_gold_paid}
